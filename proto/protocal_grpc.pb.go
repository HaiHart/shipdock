// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: proto/protocal.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComClient is the client API for Com service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComClient interface {
	Fetch(ctx context.Context, opts ...grpc.CallOption) (Com_FetchClient, error)
}

type comClient struct {
	cc grpc.ClientConnInterface
}

func NewComClient(cc grpc.ClientConnInterface) ComClient {
	return &comClient{cc}
}

func (c *comClient) Fetch(ctx context.Context, opts ...grpc.CallOption) (Com_FetchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Com_ServiceDesc.Streams[0], "/proto.Com/Fetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &comFetchClient{stream}
	return x, nil
}

type Com_FetchClient interface {
	Send(*Pack) error
	Recv() (*Pack, error)
	grpc.ClientStream
}

type comFetchClient struct {
	grpc.ClientStream
}

func (x *comFetchClient) Send(m *Pack) error {
	return x.ClientStream.SendMsg(m)
}

func (x *comFetchClient) Recv() (*Pack, error) {
	m := new(Pack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ComServer is the server API for Com service.
// All implementations must embed UnimplementedComServer
// for forward compatibility
type ComServer interface {
	Fetch(Com_FetchServer) error
	mustEmbedUnimplementedComServer()
}

// UnimplementedComServer must be embedded to have forward compatible implementations.
type UnimplementedComServer struct {
}

func (UnimplementedComServer) Fetch(Com_FetchServer) error {
	return status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedComServer) mustEmbedUnimplementedComServer() {}

// UnsafeComServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComServer will
// result in compilation errors.
type UnsafeComServer interface {
	mustEmbedUnimplementedComServer()
}

func RegisterComServer(s grpc.ServiceRegistrar, srv ComServer) {
	s.RegisterService(&Com_ServiceDesc, srv)
}

func _Com_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ComServer).Fetch(&comFetchServer{stream})
}

type Com_FetchServer interface {
	Send(*Pack) error
	Recv() (*Pack, error)
	grpc.ServerStream
}

type comFetchServer struct {
	grpc.ServerStream
}

func (x *comFetchServer) Send(m *Pack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *comFetchServer) Recv() (*Pack, error) {
	m := new(Pack)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Com_ServiceDesc is the grpc.ServiceDesc for Com service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Com_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Com",
	HandlerType: (*ComServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fetch",
			Handler:       _Com_Fetch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/protocal.proto",
}
